{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Desktop/flights/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/flights/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar url = 'https://api.rasp.yandex.net/v3.0/search/?apikey=4947ef3f-adeb-4221-93ec-743762d9d209&format=json&from=c146&to=c213&lang=ru_RU&page=1&date=2041-11-29';\nvar proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // асинхронная функция для запроса к серверу\n\nvar getResourse =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(url) {\n    var res, body;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            body = _context.sent;\n            return _context.abrupt(\"return\", body);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getResourse(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // как только ресурс будет доступен, мы получаем тело\n// и печатаем его в консоль\n\n\ngetResourse(proxyurl + url).then(function (body) {\n  console.log(body);\n}).catch(function (err) {\n  console.error(err);\n});","map":{"version":3,"sources":["/Users/admin/Desktop/flights/src/index.js"],"names":["url","proxyurl","getResourse","fetch","res","json","body","then","console","log","catch","err","error"],"mappings":";;AACA,IAAMA,GAAG,GAAG,sJAAZ;AACA,IAAMC,QAAQ,GAAG,sCAAjB,C,CAEA;;AACA,IAAMC,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOF,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKDG,KAAK,CAACH,GAAD,CALJ;;AAAA;AAKbI,YAAAA,GALa;AAAA;AAAA,mBAQAA,GAAG,CAACC,IAAJ,EARA;;AAAA;AAQbC,YAAAA,IARa;AAAA,6CAUZA,IAVY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXJ,WAAW;AAAA;AAAA;AAAA,GAAjB,C,CAaA;AACA;;;AACAA,WAAW,CAACD,QAAQ,GAAGD,GAAZ,CAAX,CACEO,IADF,CACO,UAACD,IAAD,EAAU;AACfE,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,CAHF,EAIEI,KAJF,CAIQ,UAACC,GAAD,EAAS;AACfH,EAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,CANF","sourcesContent":["\nconst url = 'https://api.rasp.yandex.net/v3.0/search/?apikey=4947ef3f-adeb-4221-93ec-743762d9d209&format=json&from=c146&to=c213&lang=ru_RU&page=1&date=2041-11-29';\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\n// асинхронная функция для запроса к серверу\nconst getResourse = async (url) => {\n\t// ждать пока результат промиса не будет доступен\n\t// fetch возвращает промис, await говорит, что мы будем ждать \n\t// пока результат промиса не станет доступным, \n\t// как только результат будет доступен, запишем его в res\n\tconst res = await fetch(url);\n\n\t// точно таким же способом достаем тело ответа\n\tconst body = await res.json();\n\t// затем возвращем результат\n\treturn body;\n};\n\n// как только ресурс будет доступен, мы получаем тело\n// и печатаем его в консоль\ngetResourse(proxyurl + url)\n\t.then((body) => {\n\t\tconsole.log(body);\n\t})\n\t.catch((err) => {\n\t\tconsole.error(err);\n\t});\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}