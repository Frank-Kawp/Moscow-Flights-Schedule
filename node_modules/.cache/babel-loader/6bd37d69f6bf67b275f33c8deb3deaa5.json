{"ast":null,"code":"import _regeneratorRuntime from \"/Users/admin/Desktop/flights/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/admin/Desktop/flights/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/admin/Desktop/flights/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/Desktop/flights/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar inMoscow = 'https://cors-anywhere.herokuapp.com/https://api.rasp.yandex.net/v3.0/schedule/?apikey=4947ef3f-adeb-4221-93ec-743762d9d209&station=s9600213&transport_types=plane&event=arrival';\nvar fromMoscow = 'https://cors-anywhere.herokuapp.com/https://api.rasp.yandex.net/v3.0/schedule/?apikey=4947ef3f-adeb-4221-93ec-743762d9d209&station=s9600213&transport_types=plane&event=departure'; // const defaultAll = 'https://api.rasp.yandex.net/v3.0/schedule/?apikey=4947ef3f-adeb-4221-93ec-743762d9d209&station=s9600213&transport_types=plane&event=departure&event=arrival';\n// надо как-то объединить в один блок данных все (просто отрисовывать 2 списка если есть)\n\nvar YandexFlightsShedule =\n/*#__PURE__*/\nfunction () {\n  function YandexFlightsShedule() {\n    _classCallCheck(this, YandexFlightsShedule);\n\n    this._apiBase = 'https://cors-anywhere.herokuapp.com/https://api.rasp.yandex.net/v3.0/search/?apikey=4947ef3f-adeb-4221-93ec-743762d9d209&format=json&';\n  }\n\n  _createClass(YandexFlightsShedule, [{\n    key: \"getResourse\",\n    value: function () {\n      var _getResourse = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(url) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(url);\n\n              case 2:\n                res = _context.sent;\n\n                if (res.ok) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Could not fetch \".concat(url) + \", Received status: \".concat(res.status));\n\n              case 5:\n                _context.next = 7;\n                return res.json();\n\n              case 7:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function getResourse(_x) {\n        return _getResourse.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"test\",\n    // async getAllFlightsFromSimferToMoscow() {\n    // \tconst res = await this.getResourse(`from=c146&to=c213&lang=ru_RU&transport_types=plane&data=2018-12-01`);\n    // \treturn res.segments;\n    // };\n    // async getAllFlightsFromMoscowToSimfer() {\n    // \tconst res = await this.getResourse(`from=c213&to=c146&lang=ru_RU&transport_types=plane&data=2018-12-01`);\n    // \treturn res.segments;\n    // };\n    value: function () {\n      var _test = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getResourse(inMoscow);\n\n              case 2:\n                res = _context2.sent;\n                return _context2.abrupt(\"return\", res);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function test() {\n        return _test.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return YandexFlightsShedule;\n}();\n\nexport { YandexFlightsShedule as default };\n;","map":{"version":3,"sources":["/Users/admin/Desktop/flights/src/services/yandex-flights-shedule.js"],"names":["inMoscow","fromMoscow","YandexFlightsShedule","_apiBase","url","fetch","res","ok","Error","status","json","getResourse"],"mappings":";;;;AACA,IAAMA,QAAQ,GAAG,iLAAjB;AACA,IAAMC,UAAU,GAAG,mLAAnB,C,CACA;AACA;;IAIqBC,oB;;;;;;SAEpBC,Q,GAAW,uI;;;;;;;;gDAEOC,G;;;;;;;uBAECC,KAAK,CAACD,GAAD,C;;;AAAjBE,gBAAAA,G;;oBAGDA,GAAG,CAACC,E;;;;;sBACF,IAAIC,KAAJ,CAAU,0BAAmBJ,GAAnB,iCACME,GAAG,CAACG,MADV,CAAV,C;;;;uBAGMH,GAAG,CAACI,IAAJ,E;;;;;;;;;;;;;;;;;;;AAGd;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;uBAGmB,KAAKC,WAAL,CAAiBX,QAAjB,C;;;AAAZM,gBAAAA,G;kDACCA,G;;;;;;;;;;;;;;;;;;;SA5BYJ,oB;AA8BpB","sourcesContent":["\nconst inMoscow = 'https://cors-anywhere.herokuapp.com/https://api.rasp.yandex.net/v3.0/schedule/?apikey=4947ef3f-adeb-4221-93ec-743762d9d209&station=s9600213&transport_types=plane&event=arrival';\nconst fromMoscow = 'https://cors-anywhere.herokuapp.com/https://api.rasp.yandex.net/v3.0/schedule/?apikey=4947ef3f-adeb-4221-93ec-743762d9d209&station=s9600213&transport_types=plane&event=departure';\n// const defaultAll = 'https://api.rasp.yandex.net/v3.0/schedule/?apikey=4947ef3f-adeb-4221-93ec-743762d9d209&station=s9600213&transport_types=plane&event=departure&event=arrival';\n// надо как-то объединить в один блок данных все (просто отрисовывать 2 списка если есть)\n\n\n\nexport default class YandexFlightsShedule {\n\n\t_apiBase = 'https://cors-anywhere.herokuapp.com/https://api.rasp.yandex.net/v3.0/search/?apikey=4947ef3f-adeb-4221-93ec-743762d9d209&format=json&';\n\t\n\tasync getResourse(url) {\n\t\t// const res = await fetch(`${this._apiBase}${url}`);\n\t\tconst res = await fetch(url);\n\n\n\t\tif (!res.ok) {\n\t\t\tthrow new Error(`Could not fetch ${url}` +\n\t\t\t`, Received status: ${res.status}`);\n\t\t}\n\t\treturn await res.json();\n\t};\n\n\t// async getAllFlightsFromSimferToMoscow() {\n\t// \tconst res = await this.getResourse(`from=c146&to=c213&lang=ru_RU&transport_types=plane&data=2018-12-01`);\n\t// \treturn res.segments;\n\t// };\n\n\t// async getAllFlightsFromMoscowToSimfer() {\n\t// \tconst res = await this.getResourse(`from=c213&to=c146&lang=ru_RU&transport_types=plane&data=2018-12-01`);\n\t// \treturn res.segments;\n\t// };\n\n\tasync test() {\n\t\tconst res = await this.getResourse(inMoscow);\n\t\treturn res;\n\t};\n};\n\n\n"]},"metadata":{},"sourceType":"module"}